SecDSM 4/9/2020 MiniCTF Writeup

Please be warned I am still a student and the methods I used may have been redundant/unnecessary
With the given IP (64.227.12.163) we are told almost nothing, so a large nmap scan seems appropriate
The aggressive scan used was the following: nmap -T4 -A -v 64.227.12.163
This is also the default option for Zenmap (Windows version of nmap) 

The following was given from the scan:
PORT     STATE SERVICE  VERSION

22/tcp   open  ssh      OpenSSH 7.9p1 Debian 10+deb10u2 (protocol 2.0)

| ssh-hostkey: 

|   2048 a4:77:52:5e:d7:ec:20:b3:19:82:f3:44:33:5f:3d:07 (RSA)

|   256 b9:d8:a8:af:f5:50:e4:3f:00:c7:c4:4d:a5:c0:78:08 (ECDSA)

|_  256 78:db:f4:d4:21:0e:e2:09:41:04:d9:12:49:50:69:63 (ED25519)

80/tcp   open  http     nginx 1.14.2

| http-methods: 

|_  Supported Methods: GET HEAD POST OPTIONS

|_http-server-header: nginx/1.14.2

|_http-title: Cat Pictures!

8080/tcp open  http     Apache Tomcat/Coyote JSP engine 1.1

|_http-favicon: Apache Tomcat

| http-methods: 

|_  Supported Methods: GET HEAD POST OPTIONS

|_http-server-header: Apache-Coyote/1.1

|_http-title: Apache Tomcat/7.0.103

8081/tcp open  java-rmi Java RMI

| rmi-dumpregistry: 

|   jmxrmi

|     javax.management.remote.rmi.RMIServerImpl_Stub

|     @64.227.12.163:8081

|     extends

|       java.rmi.server.RemoteStub

|       extends

|_        java.rmi.server.RemoteObject

Because of our aggressive scan we know not only is it running Tomcat 7.0.103 (do note that the "PUT" HTTP method is absent) but there is a Java RMI (Remote Method Invocation) port on 8081. I won't lie here, I had no idea what this was however a common Tomcat exploit would not be useable here as it is not accepting the PUT method (that exploit is detailed here: http://breaktoprotect.blogspot.com/2017/09/the-case-of-cve-2017-12615-tomcat-7-put.html)

Just in case, I check the default credentials for the Tomcat manager login which is tomcat:tomcat at http://64.227.12.163:8080/manager/status which of course failed. 

Then doing what I usually do in CTFs, I googled for "Java RMI exploits" and low and behold I found the following blog post: https://www.optiv.com/blog/exploiting-jmx-rmi

This helped show me not only what Java RMI is but showed me a metasploit module and told me that the default configuration would allow anyone to connect without authentication. This is the key!

While the metasploit module probably would've worked, I logged into it the Java RMI Application using jconsole on my Kali box. Once logged in without credentials (and making sure not to use SSL), I was able to take a look at the MBeans running on the system and view the Tomcat manager credentials!
 
(See https://github.com/BenTheCyberOne/CTF-Write-Ups/blob/master/SecDSM-2020-04-09.png for details)

The credentials appeared as manager:1changed1t

Now that we have the Tomcat credentials, we can do anything! I decided to use a Tomcat WAR deployer script found here: https://github.com/mgeeky/tomcatWarDeployer

Once the WAR was uploaded I had a root shell at http://64.227.12.163:8080/jsp_shell/. I was then able to find the flag.txt file in the root directory: “find /root” then “cat /root/flag.txt”

Not only did this teach me another weird thing Java can do, but that lazy, default configurations of software results in a very vulnerable network!



